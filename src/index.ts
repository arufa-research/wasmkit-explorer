import { app, BrowserWindow, ipcMain, session } from 'electron';

import {
  isDockerRunning,
  stopLocalNetwork,
  startLocalNetwork,
  downloadLocalNetwork,
  subscribeToLocalNetworkEvents,
  importDeployedContracts,
} from './electron/handlers/localNetwork';
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 1200,
    width: 1600,
    webPreferences: {
      webSecurity: false,
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();

  mainWindow.webContents.once('dom-ready', async () => {
    mainWindow.show();
    mainWindow.focus();

    const localNetworkName = 'neutron-node';
    if (localNetworkName) {
      // mainWindow.webContents.send(LOCAL_NETWORK_PATH_CONFIGURED, true);
      await startLocalNetwork(localNetworkName);
      await subscribeToLocalNetworkEvents(mainWindow, localNetworkName);
      // globals.localTerra.process = await subscribeToLocalTerraEvents(mainWindow);
    }
  });

  session.defaultSession.webRequest.onHeadersReceived((details, callback) => {
    callback({
      responseHeaders: {
        ...details.responseHeaders,
        'Content-Security-Policy': [
          `default-src * self blob: data: gap:; 
          style-src * self 'unsafe-inline' blob: data: gap:; 
          script-src * 'self' 'unsafe-eval' 'unsafe-inline' blob: data: gap:; 
          object-src * 'self' blob: data: gap:; 
          img-src * self 'unsafe-inline' blob: data: gap:; 
          connect-src self * 'unsafe-inline' blob: data: gap:; 
          frame-src * self blob: data: gap:;`
        ]
      }
    })
  });
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.

ipcMain.on('get-preload-path', (e) => {
  e.returnValue = MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY;
});

ipcMain.handle('startLocalNetwork', async (event, localNetworkName: string) => {
  await startLocalNetwork(localNetworkName);
  return "local network started"; 
});

ipcMain.handle('downloadLocalNetwork', async (event, startNetwork: boolean) => {
  await downloadLocalNetwork(startNetwork);
  return "local network downloaded"; 
});

ipcMain.handle('stopLocalNetwork', async (event, localNetworkName: string) => {
  await stopLocalNetwork(localNetworkName);
  return "local network stopped"; 
});

ipcMain.handle('isDockerRunning', async (event, data: null) => {
  const isRunning = await isDockerRunning();
  return isRunning; 
});

ipcMain.handle('importDeployedContracts', async (event, data: null) => {
  const isRunning = await importDeployedContracts();
  return isRunning; 
});
